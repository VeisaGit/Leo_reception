import asyncio
import logging
import os
import re
import threading
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from dotenv import load_dotenv
from http.server import HTTPServer, BaseHTTPRequestHandler

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ CHAT_ID —á–∏—Å–ª–æ–º (–µ—Å–ª–∏ –¥–∞, –ø—Ä–∏–≤–æ–¥–∏–º –∫ int)
if CHAT_ID and CHAT_ID.lstrip("-").isdigit():
    CHAT_ID = int(CHAT_ID)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°–ø–∏—Å–æ–∫ –†–ï–ì–£–õ–Ø–†–ù–´–• –®–ê–ë–õ–û–ù–û–í ¬´–ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤¬ª
BAD_PATTERNS = [
    r"\w*—Ö—É–π",
    r"\w*—Ö—É—ë",
    r"\w*—Ö—É–µ",
    r"\w*–æ—Ö—É–µ",
    r"\w*–ø–∏–¥—Ä",
    r"\w*—à–ª—é—Ö",
    r"\w*–µ–±–∞",
    r"\w*–µ–±—É",
]

@dp.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    text = r"""
üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏—ë–º–Ω—É—é –õ–µ–æ–Ω–∏–¥–∞ –ü–∏–≤–æ—Ç—Å–∫–æ–≥–æ\!*  

üìå *–í–∞—à–∏ –∏–¥–µ–∏ –≤–∞–∂–Ω—ã –¥–ª—è –Ω–∞—Å\!*  
\(–Ω–æ –Ω–µ —Ñ–∞–∫—Ç, —á—Ç–æ –æ–Ω–∏ –∫–æ–º—É\-—Ç–æ –Ω—É–∂–Ω—ã\)  

üóÇ *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–∞ –º–∞—Ö–∏–Ω–∞ –±—é—Ä–æ–∫—Ä–∞—Ç–∏–∏\?*  
1\. –í—ã –ø—Ä–∏—Å—ã–ª–∞–µ—Ç–µ —Å–≤–æ—é –≥–µ–Ω–∏–∞–ª—å–Ω—É—é \(–∏–ª–∏ –Ω–µ –æ—á–µ–Ω—å\) –∏–¥–µ—é\.  
2\. –ú—ã —Å –≤–∞–∂–Ω—ã–º –ª–∏—Ü–æ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—ë –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞—Ä—Ö–∏–≤\.  
3\. –î–∞–ª—å—à–µ –∏–¥–µ—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –∑–∞–≥–∞–¥–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º _"–∫—É–¥–∞ –Ω–∞–¥–æ"_\.  
4\. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤–µ–∂–ª–∏–≤–æ–µ _"–°–ø–∞—Å–∏–±–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞\!"_ –∏ –æ—â—É—â–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –¥–æ–ª–≥–∞\.  
    """
    await message.answer(text, parse_mode="MarkdownV2")

@dp.message()
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = message.text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ "–ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤" –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º —à–∞–±–ª–æ–Ω–∞–º
    if any(re.search(pattern, text, re.IGNORECASE) for pattern in BAD_PATTERNS):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –±–µ–∑ –º–∞—Ç–∞ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π, –¥–∞–≤–∞–π—Ç–µ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.")
        return

    # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("–°–ø–∞—Å–∏–±–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞")

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    if CHAT_ID:
        try:
            sent_message = await bot.send_message(
                CHAT_ID,
                f"üí° –ù–æ–≤–∞—è –∏–¥–µ—è –æ—Ç @{message.from_user.username}:\n\n{message.text}"
            )
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É! ID: {sent_message.message_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")

async def keep_alive():
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–≥–∞ Telegram API —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã Render –Ω–µ –æ—Ç–∫–ª—é—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å"""
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get("https://api.telegram.org") as resp:
                    logging.info(f"–ü–∏–Ω–≥ Telegram API: {resp.status}")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {e}")
        await asyncio.sleep(300)  # –ü–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç

async def run_bot():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    asyncio.create_task(keep_alive())  # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ keep_alive() –≤ —Ñ–æ–Ω–µ
    await dp.start_polling(bot)

# –§–∏–∫—Ç–∏–≤–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
class StubServer(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()
        self.wfile.write(b"Bot is running.")

def run_http_server():
    """–ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 10000, —á—Ç–æ–±—ã Render –Ω–µ –æ—Ç–∫–ª—é—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å"""
    server = HTTPServer(("0.0.0.0", 10000), StubServer)
    server.serve_forever()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_http_server, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(run_bot())