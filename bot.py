import asyncio
import logging
import os
import re
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")  # –¢–µ–ø–µ—Ä—å –±–µ–∑ int(), –µ—Å–ª–∏ ID –Ω–µ —á–∏—Å–ª–æ, —ç—Ç–æ –Ω–µ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°–ø–∏—Å–æ–∫ –†–ï–ì–£–õ–Ø–†–ù–´–• –®–ê–ë–õ–û–ù–û–í ¬´–ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤¬ª
BAD_PATTERNS = [
    r"\w*—Ö—É–π",
    r"\w*—Ö—É—ë",
    r"\w*—Ö—É–µ",
    r"\w*–æ—Ö—É–µ",
    r"\w*–ø–∏–¥—Ä",
    r"\w*—à–ª—é—Ö",
    r"\w*–µ–±–∞",
    r"\w*–µ–±—É",
]

@dp.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    text = r"""
üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏—ë–º–Ω—É—é –õ–µ–æ–Ω–∏–¥–∞ –ü–∏–≤–æ—Ç—Å–∫–æ–≥–æ\!*  

üìå *–í–∞—à–∏ –∏–¥–µ–∏ –≤–∞–∂–Ω—ã –¥–ª—è –Ω–∞—Å\!*  
\(–Ω–æ –Ω–µ —Ñ–∞–∫—Ç, —á—Ç–æ –æ–Ω–∏ –∫–æ–º—É\-—Ç–æ –Ω—É–∂–Ω—ã\)  

üóÇ *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–∞ –º–∞—Ö–∏–Ω–∞ –±—é—Ä–æ–∫—Ä–∞—Ç–∏–∏\?*  
1\. –í—ã –ø—Ä–∏—Å—ã–ª–∞–µ—Ç–µ —Å–≤–æ—é –≥–µ–Ω–∏–∞–ª—å–Ω—É—é \(–∏–ª–∏ –Ω–µ –æ—á–µ–Ω—å\) –∏–¥–µ—é\.  
2\. –ú—ã —Å –≤–∞–∂–Ω—ã–º –ª–∏—Ü–æ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—ë –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞—Ä—Ö–∏–≤\.  
3\. –î–∞–ª—å—à–µ –∏–¥–µ—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –∑–∞–≥–∞–¥–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º _"–∫—É–¥–∞ –Ω–∞–¥–æ"_\.  
4\. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤–µ–∂–ª–∏–≤–æ–µ _"–°–ø–∞—Å–∏–±–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞\!"_ –∏ –æ—â—É—â–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –¥–æ–ª–≥–∞\.  
    """
    await message.answer(text, parse_mode="MarkdownV2")

@dp.message()
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = message.text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ "–ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤" –ø–æ –Ω–∞—à–∏–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º —à–∞–±–ª–æ–Ω–∞–º
    if any(re.search(pattern, text, re.IGNORECASE) for pattern in BAD_PATTERNS):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –±–µ–∑ –º–∞—Ç–∞ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π, –¥–∞–≤–∞–π—Ç–µ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.")
        return

    # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("–°–ø–∞—Å–∏–±–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞")

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∏ –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫–∏
    try:
        sent_message = await bot.send_message(
            CHAT_ID,
            f"üí° –ù–æ–≤–∞—è –∏–¥–µ—è –æ—Ç @{message.from_user.username}:\n\n{message.text}"
        )
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É! ID: {sent_message.message_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")

async def main():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())